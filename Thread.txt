> Multitarefas: processos e threads
	> Processo - programa que está sendo executado
	> Thread - menor unidade de código que pode ser executada
> Em um programa pode executar uma ou mais tarefas (thread) ao mesmo tempo
> Ex: editor de texto pode formatar e ao mesmo tempo enviar para impressão

> Ciclo de vida Thread:
	> new Thread() - criação da instancia
	> start()
	> Runnable - pronta para execução
	> run()
	> Running - em execução
	> Ou termina a thread estado Dead (thread terminada)
	> Ou coloca para dormir ou para esperar ou suspende
	> Se nao foi Dead  foi para estado de Waiting
	> sleep() / wait() / suspend()
	> Waiting - estado de espera
	> notify() / notifyAll() / resume() - quando a thread 	"acorda"
	> Runnable - pronta para execução
	
> De Runnable para Running - run()
> De Running para Runnable - yield()
-
Criar Thread:
> Extender Thread
> Implementar Runnable

> start: inicia o metodo run
> run: executa a tarefa da thread
> sleep: coloca a thread para "dormir" por alguns milisegundos

> Thread.isAlive() testa se a thread está ativa, 'viva'
> Thread.join() / Thread.join(millis)
	> A próxima Thread só vai ser executada depois que a Thread.join terminar ou depois do millis
> synchronized:
	> Coordenador as atividades de 2 ou mais Threads
	> Quando 2 ou mais threads precisam acessar um recurso 	compartilhado, ou somente 1 thread pode acessar o recurso 	por vez
	> Usa palavra-chave 'synchronized' em metodos (assinatura) 	ou em bloco de codigo

> wait(): bloqueia a execução da thread temporariamente, ou seja, coloca em 'modo de espera'
	> a thread fica em modo de espera ate que seja notificada
> notify(): notifica uma thread que estava esperando, ou seja, retorna a execução da thread
> notifyAll(): notifica todas as threads, e a que tem prioridade mais alta ganha acesso ao objeto









